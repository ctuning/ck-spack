##############################################################################
# Copyright (c) 2017, Los Alamos National Security, LLC
# Produced at the Los Alamos National Laboratory.
#
# This file is part of Spack.
# Created by Todd Gamblin, tgamblin@llnl.gov, All rights reserved.
# LLNL-CODE-647188
#
# For details, see https://github.com/spack/spack
# Please also see the NOTICE and LICENSE files for our notice and the LGPL.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License (as
# published by the Free Software Foundation) version 2.1, February 1999.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
# conditions of the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
##############################################################################

from spack import *
import os


class Flang(CMakePackage):
    """Flang is a Fortran compiler targeting LLVM."""
    homepage = "https://github.com/flang-compiler/flang"
    url      = "https://github.com/flang-compiler/flang/archive/flang_20180319.tar.gz"

    version('develop', git='https://github.com/flang-compiler/flang', branch='master')
    version('20180319', 'e659bad83b791f90af2c5cd672864669')

    depends_on(
            "llvm+clang@4.0.1,5.0.0,6.0.0",
        patches=[
            patch('https://github.com/llvm-mirror/clang/pull/33.diff',
                      sha256='e46d7ab305e5e95c51f4656d9b52058143cd85d859b312b3c80e93a02d54b4a5',
                      when='@4.0.1', level=1, working_dir='tools/clang'),
            patch('https://github.com/llvm-mirror/clang/pull/35.diff',
                      sha256='7f39555783993f78b75c380ca5ef167c1d8b88cc75c6542f6c94e0b6acfb7c5d',
                      when='@5.0.0', level=1, working_dir='tools/clang'),
            patch('https://github.com/llvm-mirror/llvm/pull/56.diff',
                      sha256='2ee155aa1017766cdae3a860050d82ed48961a2f88bcef760d4922ff25ce381e',
                      when='@6.0.0', level=1),
            patch('https://github.com/llvm-mirror/clang/pull/40.diff',
                      sha256='5021f2ea54e957eb1c712f9e9a87b3dc33616ebd2e84735b6735f788fd2c45e9',
                      when='@6.0.0', level=1, working_dir='tools/clang')
        ]
    )
    depends_on("pgmath@develop", when="@develop")

    def cmake_args(self):
        options = [
            '-DWITH_WERROR=OFF',
            '-DCMAKE_C_COMPILER=%s' % os.path.join(
                self.spec['llvm'].prefix.bin, 'clang'),
            '-DCMAKE_CXX_COMPILER=%s' % os.path.join(
                self.spec['llvm'].prefix.bin, 'clang++'),
            '-DCMAKE_Fortran_COMPILER=%s' % os.path.join(
                self.spec['llvm'].prefix.bin, 'flang'),
            '-DFLANG_LIBOMP=%s' % find_libraries(
                'libomp', root=self.spec['llvm'].prefix.lib)
        ]

        return options

    @run_after('install')
    def post_install(self):
        # we are installing flang in a path different from llvm, so we
        # create a wrapper with -L for e.g. libflangrti.so and -I for
        # e.g. iso_c_binding.mod. -B is needed to help flang to find
        # flang1 and flang2. rpath_arg is needed so that executables
        # generated by flang can find libflang later.
        flang = os.path.join(self.spec.prefix.bin, 'flang')
        with open(flang, 'w') as out:
            out.write('#!/bin/bash\n')
            if '@develop' in self.spec:
                out.write(
                    '{0} -I{1} -L{2} -L{3} {4}{5} {6}{7} -B{8} "$@"\n'.format(
                        self.spec['llvm'].prefix.bin.flang,
                        self.prefix.include, self.prefix.lib,
                        self.spec['pgmath'].prefix.lib,
                        self.compiler.fc_rpath_arg, self.prefix.lib,
                        self.compiler.fc_rpath_arg,
                        self.spec['pgmath'].prefix.lib,
                        self.spec.prefix.bin))
            else:
                out.write(
                    '{0} -I{1} -L{2} {3}{4} -B{5} "$@"\n'.format(
                        self.spec['llvm'].prefix.bin.flang,
                        self.prefix.include, self.prefix.lib,
                        self.compiler.fc_rpath_arg, self.prefix.lib,
                        self.spec.prefix.bin))
            out.close()
        chmod = which('chmod')
        chmod('+x', flang)

    def setup_environment(self, spack_env, run_env):
        # to find llvm's libc++.so
        spack_env.set('LD_LIBRARY_PATH', self.spec['llvm'].prefix.lib)
        run_env.set('FC', join_path(self.spec.prefix.bin, 'flang'))
        run_env.set('F77', join_path(self.spec.prefix.bin, 'flang'))
        run_env.set('F90', join_path(self.spec.prefix.bin, 'flang'))
